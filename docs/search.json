[{"path":"/articles/02_estimation_model.html","id":"recruitment-bias-ramp","dir":"Articles","previous_headings":"","what":"Recruitment Bias Ramp","title":"Sablefish MSE Estimation Method","text":"2023 operational stock assessment model updated include Methot Taylor (2013) recruitment bias correction ramp October/November 2023. order bring EM MSE line operational model, bias correction ramp integrated TMB model provided part SpatialSablefishAssessment package. Recruitment variation (\\(\\sigma_R\\)) remains fixed parameter EM (maximum level, \\(\\sigma_R = 1.04\\)).","code":""},{"path":"/articles/02_estimation_model.html","id":"sex-disaggregated-age-compositions","dir":"Articles","previous_headings":"","what":"Sex-disaggregated Age Compositions","title":"Sablefish MSE Estimation Method","text":"order better estimate sex-specific selectivity curves within EM, model updated fit sex-disaggregated age composition data “proportions across approach”. different SpatialSablefishAssessment model operational assessment model, fit sex-aggregated age composition data.","code":""},{"path":"/articles/02_estimation_model.html","id":"additional-notes-about-the-em","dir":"Articles","previous_headings":"","what":"Additional Notes About the EM","title":"Sablefish MSE Estimation Method","text":"EM known struggle accurately identifying population scale, often trouble correctly re-estimating survey catchability coefficients. counter problem, strong prior placed coefficient Alaska longline NOAA trawl survey indices abundance. estimate catchability coefficient operational assessment used mean respective priors. Prior standard deviations constrained 2% mean. EM minimally biased regards SSB fully-selected F, persists ~7% negative bias average recruitment estimates. believed due fact EM constrain recriutment deviations sum zero across timeseries (sum--zero constraint), done operational assessment used parameterize OM.","code":""},{"path":"/articles/02_estimation_model.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Sablefish MSE Estimation Method","text":"Goethel, D.R., Cheng, M.L.H., Echave, K.B., Marsh, C., Rodgveller, C.J., Shotwell, K., Siwicke, K., 2023. Stock Assessment sablefish stock Alaska. North Pacific Fisheries Management Council, Anchorage, AK. Methot, R.D., Taylor, .G., 2011. Adjusting bias due variability estimated recruitments fishery assessment models. Can. J. Fish. Aquat. Sci. 68, 1744–1760. https://doi.org/10.1139/f2011-092","code":""},{"path":"/articles/03_recruitment_functions.html","id":"working-with-existing-recruitment-functions","dir":"Articles","previous_headings":"","what":"Working with Existing Recruitment functions","title":"Specifying Recruitment","text":"Four recruitment functions come pre-packaged repository: resample_recruits - randomly resample known recruitment timeseries resample_regime_recruits - randomly resample recruits form known recruitment timeseries pre-defined regimes regime_recruits - randonly draw recruitment regime-specific distributions beverton_holt - Beverton-Holt stock recruit relationships, parameterized steepness first three functions function way example , users simple provide function name, named parameter list (without final seed parameter). beverton_holt function works differently however, due specifying state-dependent recruitment function. function R function factory (funtion returns another function), accepts standard Beverton-Holt parameters – h, R0, S0 – returns back new function SSB provided input (see example ). function factory can used nearly exactly way previous three recruitment functions: Like recruitment functions, final “seed” parameter provided input recruitmemt$pars list. MSE internally handle computing SSB beginning year using defined SRR generate annual recruitment level.","code":"beverton_holt <- function(h, R0, S0, sigR, seed){     # note that the set.seed() call needs to happen     # outside of the returned function, or else there     # will be no random variability in recruitment draws     set.seed(seed)      function(ssb){         bh <- (4*R0*h*ssb)/((1-h)*R0*(S0/R0) + (5*h - 1)*ssb)         return(             bh + exp(rnorm(1, mean=0, sd=sigR)) # lognormal deviates         )     } }  bevholt <- beverton_holt(h=0.7, R0=25, S0=300, sigR=1, seed=1120) bevholt(ssb=50) # 16.65 ## [1] 17.74222 om$recruitment$func <- beverton_holt om$recruitment$pars <- list(     h=0.70,     R0=25,     S0=300,     sigR=1 )"},{"path":"/articles/03_recruitment_functions.html","id":"defining-custom-recruitment-functions","dir":"Articles","previous_headings":"","what":"Defining Custom Recruitment Functions","title":"Specifying Recruitment","text":"Users can, optionally, define recruitment functions beyond comes pre-packaged MSE. two types recruitment functions can developed: state-dependent (Beverton-Holt), state-dependent (recruitment regime functions). State-independent recruitment functions useful property entire recruitment timeseries can defined MSE simulation starts (helpful guaranteeing reproducability model runs), state-depenedent functions realized start simulation year. possible, recommend defining state-independent recruitment functions. R function defines custom recruitment function, regardless type, can take form needs important caveat final function pararmeter must called “seed” represent random seed (holds even custom recruitment functions completely deterministic). example recruitment function random pulls recruitment lognormal distribution: example “state-independent” recruitment function. function takes mean recruitment level (log space) recruitment variation computes nyears random recruitment levels. Nearly state-independent recruitment functions need accept nyears parameter order generate correct number recruitment events. Similarly, like recruitment functions, final parameter defines random seed.","code":"random_lognormal <- function(log_mean_rec, sigR, nyears, seed){     set.seed(seed)     return(exp(log_mean_rec + rnorm(nyears, 0, sigR) - 0.5*sigR^2)) }  random_lognormal(log_mean_rec = log(25), sigR = 1.04, nyears = 5, seed = 1007) # 25.022 19.746 55.721 14.737 5.858"},{"path":"/articles/04_harvest_control_rule_function.html","id":"constructing-a-new-hcr-function","dir":"Articles","previous_headings":"","what":"Constructing a New HCR Function","title":"Harvest Control Rules","text":", describe construct new step-wise harvest control rule function, F=0.10 SSB > 100,000 tons, F=0.01 SSB <= 100,000 tons. HCR function (step_hcr) takes three required parameters inputs, though makes use naa dem_params (users write function take three parameters inputs, MSE function fail attempting evaluate HCR function). Note two functions simplified single function user’s behest.","code":"step_hcr <- function(ref_pts, naa, dem_params){     # Calculate ssb as naa*waa*mat (female only) in units of 1,000s tons     ssb <- apply(naa[,,1,]*dem_params$waa[,,1,,drop=FALSE]*dem_params$mat[,,1,,drop=FALSE], 1, sum)     return(ifelse(ssb > 100, 0.10, 0.01)) }  mse <- run_mse(om=om, hcr=step_hcr, nyears_input=100)"},{"path":"/articles/04_harvest_control_rule_function.html","id":"constructing-more-complex-hcr-functions","dir":"Articles","previous_headings":"","what":"Constructing More Complex HCR Functions","title":"Harvest Control Rules","text":"HCRs require information just three required parameters defined. example, consider HCR wants dynamically reduce maximum F applied threshold HCR based average age population given year. HCR can defined like : avgeage_threshold_f HCR function accepts two parameters (ref_naa ages) required HCR functions. order dynamcically handle HCR function takes indeterminate number additional parameters, run_mse() function makes use special ... argument. argument allows users supply many additional named parameters needed, parameters passed along HCR function called within HCR loop. , example, final MSE call look something like: pattern extends HCR function, even ones require dozens additional parameters (parameter names still need unique, paramaters names likes om, hcr, ref_pts, naa, etc. already used either calling MSE function default parameters alredy supplued HCR function.","code":"average_age <- function(naa, ages){     return(weighted.mean(ages, naa)) }  avgage_threshold_f <- function(ref_pts, naa, dem_params, ref_naa, ages){     # Calculate ssb as naa*waa*mat (female only) in units of 1,000s tons     ssb <- apply(naa[,,1,]*dem_params$waa[,,1,,drop=FALSE]*dem_params$mat[,,1,,drop=FALSE], 1, sum)     as_stat <- average_age(naa, ages)/average_age(ref_naa, ages)     as_scalar <- threshold_f(as_stat, f_min=0, f_max=1, lrp=0, urp=1)      x <- ssb/ref_pts$B40     f_max <- ref_pts$F40*as_scalar     f_min <- 0     lrp <- 0     urp <- 1      if(x >= urp)  F <- f_max # if stock status >= 1     if(x > lrp && x < urp) F <- f_max * ((x-lrp)/(urp-lrp)) # if stock status > alpha & stock status < 1     if(x <= lrp) F <- f_min      return(f) } ages <- 2:31 ref_naa <- 25*sapply(1:30, \\(i) 1*(exp(-0.1))^i)  mse <- run_mse(om=om, hcr=avgage_threshold_f, ref_naa=ref_naa, ages=ages, nyears_input=100)"},{"path":"/articles/04_harvest_control_rule_function.html","id":"additional-hcr-complexity","dir":"Articles","previous_headings":"","what":"Additional HCR Complexity","title":"Harvest Control Rules","text":"HCRs can also additional “meta-rules” define behavior. common example stability constraints, limit much annual catch levels allowed change years. constraints directly part HCR, rather function management process. , defined separately HCR functions. supply additional management rules, stability constraints harvest caps, named list management_rules must added larger model_options list. management_rules list object, can, presently, define three parameters: NOTE: interface defining complex HCR functions defining additional management meta-rules subject change (05/13/2024).","code":"model_options$management_rules = list(     stability_increase = 0.15,   # maximum allowed percent increase in TAC between successive years     stability_decrease = 0.15,   # maximum allowed percent decrease in TAC between successive years     tac_cap = 100000             # maximum allowed TAC )"},{"path":"/articles/05_processing_mse_results.html","id":"bind_mse_results","dir":"Articles","previous_headings":"","what":"bind_mse_results","title":"Processing MSE Results","text":"function bind_mse_results(model_runs, var, extra_columns) takes list completed MSE simulation objects, vector variable names (characters), named list additional columns, returns dataframe long-format. intended used : resulting object data frame least six columns: time age sex region value L1 Note “L1” column contain name variable piece data (“value”) associated . example, “L1” column “naa”. extra_columns specified, additional columns appended end dataframe. mse object(s) model_runs contain results multiple somulations, “sim” column also part dataframe. combination output variables can supplied part “vars” parameter vector, though resulting dataframe may contain NA entries mixing variables defined “-age” (e.g. numbers--age F--age), variables defined annualy (e.g. TAC recommended F HCR function). , users may interact MSE outputs standard R dataframe commands, via typical tidyverse functions.","code":"mse1 <- run_mse(om, hcr, mse_options, nyears_input=100)  model_runs <- list(mse1) extra_columns <- list(om=\"hcr1\") vars <- c(\"naa\")  results <- bind_mse_outputs(model_runs, vars, extra_columns)"},{"path":"/articles/05_processing_mse_results.html","id":"how-to-use-the-extra_columns-parameter","dir":"Articles","previous_headings":"","what":"How to Use the extra_columns Parameter","title":"Processing MSE Results","text":"extra_columns parameter doesn’t make lot sense example, single MSE object processed. However, case multiple MSE objects, different combinations OMs HCRs processed simultaneously, users need way differentiate data belongs MSE simualtions. extra_columns parameter provides means users explicitly identfiy MSE simulations. example, four MSE simulations, spanning two OMs two HCR functions, processed together (presumably comparing performance different HCRs across OMs later ). extra_columns list defines two additional columns, “om” “hcr” (names list), added resulting output dataframe. values list obect vectors length model_runs object.","code":"mse1 <- run_mse(om1, hcr1, mse_options, nyears_input=100) mse2 <- run_mse(om1, hcr2, mse_options, nyears_input=100) mse3 <- run_mse(om2, hcr1, mse_options, nyears_input=100) mse4 <- run_mse(om2, hcr2, mse_options, nyears_input=100)  model_runs <- list(mse1, mse2, mse3, mse4) extra_columns <- list(     om = rep(c(\"om1\", \"om2\"), each=2),     hcr = rep(c(\"hcr1\", \"hcr2\"), 2) ) vars <- c(\"naa\")  results <- bind_mse_outputs(model_runs, vars, extra_columns)"},{"path":"/articles/05_processing_mse_results.html","id":"additional-helper-functions","dir":"Articles","previous_headings":"","what":"Additional Helper Functions","title":"Processing MSE Results","text":"Three helper functions provided quickly computing common derived quantities: get_ssb_biomass() - computes spawning biomass total biomass true estimated numbers--age matrices get_fishing_mortalities() - computes fully selected fishing mortality fleet jointly across fleets true estimated F--age matrices get_recruits() - computed annual recruitment true estimated numbers--age matrices resulting tibble function remains long format appropriately columns retained. plotting, additional processing likely needed. NOTE: Additional helper functions likely added throughout lifecycle package streamline common calculations. get_landings() function development allow simplified processing landings data.","code":""},{"path":"/articles/06_multiple_mse_simulations.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel Processing","title":"Multiple MSE Simulations","text":"Parallel processing within package currently handled via pblapply function pbapply package. function acts like standard lapply function call, allows users provide cluster object parameter faciliatte running given function multiples time, time (.e. parallel). cluster object created via call parallel::makeCluster(...) function. default, SablefishMSE package create cluster using 2 fewer available number cores machine. ensures computational power reserved users complete tasks. fewer number simulations requested (e.g. user asks 5 simulations, computer 10 cores), many compute cores simulations used. full workflow used run_mse_parallel function follows: Users need setup clusters; code block provided demonstrate exactly going within run_mse_parallel function.","code":"cores <- min(parallel::detectCores()-2, nsims)     cl <- parallel::makeCluster(cores, outfile=\"\")     registerDoParallel(cl)      pbapply::pblapply(..., function(...){         # Additional code to handle function imports, the run_mse() call, and data collation     })"},{"path":"/articles/06_multiple_mse_simulations.html","id":"using-run_mse_parallel","dir":"Articles","previous_headings":"","what":"Using run_mse_parallel","title":"Multiple MSE Simulations","text":"run_mse_parallel(...) function designed act simple parallel wrapper base run_mse(...) function. create parallel computing cluster, run multiple MSE simulations, OM HCR specifications, simulation vary random seed used generate annual recruitment levels simulate observations. use wrapper, users can simple define om hcr object using basic run_mse() function, additionally specify total number simulations, nsims vector random simulation seeds parallelized across. full workflow works like: future, additional parallel wrapper functions allow running multiple MSE simulations across multiple different HCRs multiple different OMs also available.","code":"om <- ... # Create an OM object hcr <- ... # Create an HCR function  nsims <- 10 # run 10 simulations seeds <- sample(1:1e6, nsims) # get some random seeds  run_mse_parallel(nsims, seeds, om, hcr, nyears=nyears)"},{"path":"/articles/SablefishMSE.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A Simple Example","title":"SablefishMSE","text":"simple runnable example available dev/sablefish_mse_example.r. primary R function runs MSE simulation loop : , break components go om hcr parameters.","code":"run_mse(   om=sable_om,   hcr=tier3,   nyears_input = nyears )"},{"path":"/articles/SablefishMSE.html","id":"setting-up-the-operating-model","dir":"Articles","previous_headings":"A Simple Example","what":"Setting up the Operating Model","title":"SablefishMSE","text":"First, start defining operating model. package relies afscOM package run forward OM projection component MSE, well generate observation data. afscOM requires users define two objects control behavior forward projection: dem_params list model_options list. dem_params list named list multi-dimensional arrays define demographic parameters within OM. model_options list complex named list various options control, among things, details observation processes catches apportioned fleets. details proper construction objects, please see afscOM repository. SablefishMSE requires users pass named list defines components OM MSE wrapper function, includes two additional components beyond required afscOM. components : dem_params exactly dem_params list supplied afscOM. model_options list supplied afscOM extra options appended. init_naa initial numbers--age (sex) vector OM begin. recruitment function list parameters defines annual recruitment generated (recruitment functions work within package see: “Specifying Recruitment”).","code":"names(sable_om)"},{"path":"/articles/SablefishMSE.html","id":"setting-up-a-harvest-control-rule","dir":"Articles","previous_headings":"A Simple Example","what":"Setting up a Harvest Control Rule","title":"SablefishMSE","text":"Second, users must define harvest control rule (HCR) function relates current population state future fishing mortality rate. provide several pre-built HCR functions, including currently adopted Tier 3a rule () used NPFMC set ABCs Alaska sablefish, users can also define custom HCR functions (see “Constructing New HCR Function” details custom HCR functions). function object provided directly run_mse function, evaluated within MSE function . reason, defining HCR functions must done carefully respect parameter inputs function outputs (see “Constructing Complex HCR Functions” details).","code":"tier3 <- function(ref_pts, naa, dem_params){     # Compute SSB from the current numbers-at-age matrix     ssb <- apply(naa[,,1,]*dem_params$waa[,,1,,drop=FALSE]*dem_params$mat[,,1,,drop=FALSE], 1, sum)     # Compute F based on the NPFMC Tier 3a rule     return(         npfmc_tier3_F(ssb, ref_pts$B40, ref_pts$F40)     ) }"},{"path":"/articles/SablefishMSE.html","id":"running-the-mse","dir":"Articles","previous_headings":"A Simple Example","what":"Running the MSE","title":"SablefishMSE","text":"OM object HCR function correctly defined, running MSE simple : nyears_input parameter defined many years MSE project forward. also parameter spinup_years can used define many years run OM forward , estimation model starts used set future TACs via HCR. default, spinup_years = 64 specific Alaska sablefish. Tests performed verify behavior MSE spinup_years parameter different 64. wrapper function performing many MSE runs across different random seeds parallel. information parallel MSE simulations, see “Multiple MSE Simulations”.","code":"mse <- run_mse(   om=sable_om,   hcr=tier3,   nyears_input = nyears )"},{"path":"/articles/SablefishMSE.html","id":"processing-mse-outputs","dir":"Articles","previous_headings":"A Simple Example","what":"Processing MSE outputs","title":"SablefishMSE","text":"MSE function returns large amount data back user including numbers--age sex every year (true estimated), fishing-mortality--age (true estimated), recommended F HCR year. facilitate easier processing results, especially MSEs different OMs different HCRs compared, bind_mse_outputs function provided. use bind_mse_outputs function, place finished MSE objects unnamed list (model_runs case), create named list extra columns want appended output data frame (extra_columns case; often going just HCR /OM used, see “Use extra_columns Parameter” details created), determine data like pull MSE objects (\"naa\" \"naa_est\" case). resulting dataframe object contain just provided data user asks , long format. , user can manipulate output data necesarry computing performance metrics plotting results. Three wrapper functions, get_ssb_biomass, get_fishing_mortalities, get_recruits, provided easily compute return common quantities (spawning biomass total biomass, fishing mortality, recruitment respectively). example one way users may plot SSB.","code":"model_runs <- list(     mse ) extra_columns <- list(     hcr = c(\"tier3\") )  bind_mse_outputs(model_runs, var=c(\"naa\", \"naa_est\"), extra_columns) # Plot spawning biomass from OM and EM d <- get_ssb_biomass(model_runs, extra_columns, sable_om$dem_params) %>%     # SSB is females only     filter(sex == \"F\") %>%     # summarise SSB across year and sim      group_by(time, hcr, sim, L1) %>%     summarise(spbio=sum(spbio)) %>%     # Compute quantiles of SSB distribution     group_by(time, hcr, L1) %>%     median_qi(spbio, .width=c(0.50, 0.80), .simple_names=FALSE) %>%     # Reformat ggdist tibble into long format     reformat_ggdist_long(n=3)   ggplot(d %>% filter(L1 == \"naa\")) +      geom_lineribbon(aes(x=time, y=median, ymin=lower, ymax=upper, group=hcr), size=0.4)+     geom_pointrange(data = d %>% filter(L1 == \"naa_est\"), aes(x=time, y=median, ymin=lower, ymax=upper), alpha=0.35, color=\"red\")+     geom_vline(xintercept=64, linetype=\"dashed\")+     geom_hline(yintercept=121.4611, linetype=\"dashed\")+     scale_fill_brewer(palette=\"Blues\")+     scale_y_continuous(limits=c(0, 300))+     coord_cartesian(expand=0)+     theme_bw()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua Zahner. Author. Benjamin Williams. Author, maintainer. Dan Goethel. Author. Curry Cunningham. Author. Chris Lunsford. Contributor. Matt Cheng. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zahner J, Williams B, Goethel D, Cunningham C, Cheng M (2024). SablefishMSE: Conduct Management Strategy Evaluation Alaska Sablefish. R package version 0.1.0.0000.","code":"@Manual{,   title = {SablefishMSE: Conduct Management Strategy Evaluation for Alaska Sablefish},   author = {Joshua Zahner and Benjamin Williams and Dan Goethel and Curry Cunningham and Matt Cheng},   year = {2024},   note = {R package version 0.1.0.0000}, }"},{"path":"/index.html","id":"sablefishmse---management-strategy-evaluation-for-alaska-sablefish","dir":"","previous_headings":"","what":"Conduct Management Strategy Evaluation for Alaska Sablefish","title":"Conduct Management Strategy Evaluation for Alaska Sablefish","text":"Joshua . Zahner (UAF), Ben Williams (NOAA), Curry Cunningham (UAF), Dan Goethel (NOAA), Matt Cheng (UAF), Pete Hulson (NOAA), Chris Lunsford (NOAA) management strategy evaluation simulation framework assessing alternative management options Alaska sablefish North Pacific ocean, jurisidiction U.S. North Pacific Fisheries Management Council. MSE operating model (OM) built using afscOM R package, generalized fisheries operating model implementation. OM age-structured (ages 2-31), multi-sex (male female), single region (coastwide Alaska) model, two active fisheries (fixed gear trawl) two scientific surveys (NOAA domestic longline NOAA trawl), built demographic parameters used/estimated 2023 Alaska sablefish stock assessment (Goethel et al. 2023). MSE estimation model (EM) modified version SpatialSablefishAssessment TMB model built 2022, updated include recruitment bias ramp fit sex-disaggregated age composition data. range recruitment models harvest control rules (HCRs) implemented allow testing efficacy many different management strategies across range reasonable future recruitment scenarios. Examples run full MSE simulation loop available dev/sablefish_mse_example.r","code":""},{"path":"/index.html","id":"project-background-and-objectives","dir":"","previous_headings":"","what":"Project background and objectives","title":"Conduct Management Strategy Evaluation for Alaska Sablefish","text":"Alaskan sablefish (Anoplopoma fimbria) currently managed using North Pacific Fishery Management Council’s (NPFMC) F40 harvest control rule (HCR). However, sablefish long-lived, relatively slow growing species generic HCRs aimed maximizing yearly harvest (e.g., spawner-per-recruit, SPR, based maximum sustainable yield proxies) may perform adequately achieving key conservation fishery performance metrics (e.g., maintaining robust age structure maximizing long-term fishery yield). address scientific stakeholder concerns regarding robustness current HCR sablefish, closed loop simulation tool developed implemented test efficacy robustness current alternate HCRs well spawning metrics management strategy evaluation (MSE; Punt et al. 2016). aim study identify HCRs can achieve conservation economic priorities, also exploring assumptions regarding calculation spawning potential impact HCR robustness.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Conduct Management Strategy Evaluation for Alaska Sablefish","text":"Goethel, D.R., Cheng, M.L.H., Echave, K.B., Marsh, C., Rodgveller, C.J., Shotwell, K., Siwicke, K., 2023. Stock Assessment sablefish stock Alaska. North Pacific Fisheries Management Council, Anchorage, AK. Punt, .E., Butterworth, D.S., de Moor, C.L., De Oliveira, J..., Haddon, M., 2016. Management strategy evaluation: best practices. Fish Fisheries 17, 303–334. https://doi.org/10.1111/faf.12104","code":""},{"path":"/reference/abi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Age-Based Indicator\n#'\nCompute ABI (Griffiths et al. 2023) given a\npopulation age structure and an age structure\nto use as a reference. — abi","title":"Compute Age-Based Indicator\n#'\nCompute ABI (Griffiths et al. 2023) given a\npopulation age structure and an age structure\nto use as a reference. — abi","text":"Compute Age-Based Indicator #' Compute ABI (Griffiths et al. 2023) given population age structure age structure use reference.","code":""},{"path":"/reference/abi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Age-Based Indicator\n#'\nCompute ABI (Griffiths et al. 2023) given a\npopulation age structure and an age structure\nto use as a reference. — abi","text":"","code":"abi(naa, ref, threshold = 0.9, start_age = 3)"},{"path":"/reference/abi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Age-Based Indicator\n#'\nCompute ABI (Griffiths et al. 2023) given a\npopulation age structure and an age structure\nto use as a reference. — abi","text":"naa numbers--age vector ref reference naa vector threshold proportion population consider \"old\" start_age age start calculating ABI","code":""},{"path":"/reference/as_scalar_threshold_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Threshold HCR with Fmax scaled by Age Structure — as_scalar_threshold_f","title":"Threshold HCR with Fmax scaled by Age Structure — as_scalar_threshold_f","text":"Compute allowable fishing mortality rate threshold HCR parameterized f_min, f_max, lrp, urp, scales f_max age structure summary statistic relative value summmary statistic reference age structure.","code":""},{"path":"/reference/as_scalar_threshold_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threshold HCR with Fmax scaled by Age Structure — as_scalar_threshold_f","text":"","code":"as_scalar_threshold_f(x, naa, ref_naa, as_func, ..., f_min, f_max, lrp, urp)"},{"path":"/reference/as_scalar_threshold_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threshold HCR with Fmax scaled by Age Structure — as_scalar_threshold_f","text":"x input HCR (e.g. SSB , SSB/B40) naa age structure (e.g. numbers age biomass age) ref_naa age structure compare `naa` as_func function compute age structure statistic (must take naa first argument) ... additional arguments pass `as_func(naa, ...)` f_min F use x < lrp f_max F use x > urp lrp value x f_min applies urp value x f_max applies","code":""},{"path":"/reference/average_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average age of a population\n#'\nCalculate the average age of a population\ngiven its age structure. — average_age","title":"Compute average age of a population\n#'\nCalculate the average age of a population\ngiven its age structure. — average_age","text":"Compute average age population #' Calculate average age population given age structure.","code":""},{"path":"/reference/average_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average age of a population\n#'\nCalculate the average age of a population\ngiven its age structure. — average_age","text":"","code":"average_age(naa, ages)"},{"path":"/reference/average_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average age of a population\n#'\nCalculate the average age of a population\ngiven its age structure. — average_age","text":"naa numbers--age vector ages vector ages","code":""},{"path":"/reference/bind_mse_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Tibble of MSE Output Data from Multiple Models — bind_mse_outputs","title":"Create Tibble of MSE Output Data from Multiple Models — bind_mse_outputs","text":"Create Tibble MSE Output Data Multiple Models","code":""},{"path":"/reference/bind_mse_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Tibble of MSE Output Data from Multiple Models — bind_mse_outputs","text":"","code":"bind_mse_outputs(model_runs, var, extra_columns)"},{"path":"/reference/bind_mse_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Tibble of MSE Output Data from Multiple Models — bind_mse_outputs","text":"model_runs list MSE model run objects (created via `run_mse(...)`) var output variable model run objects extra_columns list extra column names values add tibble","code":""},{"path":"/reference/calculate_ref_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate NPFMC groundfish reference points — calculate_ref_points","title":"Calculate NPFMC groundfish reference points — calculate_ref_points","text":"Calculate F_OFL (F_35 (SSB F_ABC).","code":""},{"path":"/reference/calculate_ref_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate NPFMC groundfish reference points — calculate_ref_points","text":"","code":"calculate_ref_points(nages, mort, mat, waa, sel, ret, avg_rec)"},{"path":"/reference/calculate_ref_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate NPFMC groundfish reference points — calculate_ref_points","text":"nages number ages age structure mort instantaneous natural mortality rate mat maturity--age vector waa weight--age vector sel total selectivity--age vector ret total retention--age vector avg_rec average recruitment F instantenous fishing mortality rate","code":""},{"path":"/reference/calculate_ref_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate NPFMC groundfish reference points — calculate_ref_points","text":"list F40, F35, B40","code":""},{"path":"/reference/compute_bx.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average SSB under a level of F — compute_bx","title":"Compute average SSB under a level of F — compute_bx","text":"Compute average SSB given level fishing mortality.","code":""},{"path":"/reference/compute_bx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average SSB under a level of F — compute_bx","text":"","code":"compute_bx(nages, mort, mat, waa, sel, ret, F, avg_rec)"},{"path":"/reference/compute_bx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average SSB under a level of F — compute_bx","text":"nages number ages age structure mort instantaneous natural mortality rate mat maturity--age vector waa weight--age vector sel total selectivity--age vector ret total retention--age vector F instantenous fishing mortality rate avg_rec average recruitment","code":""},{"path":"/reference/compute_sbpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Spawning Biomass per Recruit (SBPR) — compute_sbpr","title":"Compute Spawning Biomass per Recruit (SBPR) — compute_sbpr","text":"Compute SBPR given level fishing mortality.","code":""},{"path":"/reference/compute_sbpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Spawning Biomass per Recruit (SBPR) — compute_sbpr","text":"","code":"compute_sbpr(nages, mort, mat, waa, sel, ret, F)"},{"path":"/reference/compute_sbpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Spawning Biomass per Recruit (SBPR) — compute_sbpr","text":"nages number ages age structure mort instantaneous natural mortality rate mat maturity--age vector waa weight--age vector sel total selectivity--age vector ret total retention--age vector F instantenous fishing mortality rate","code":""},{"path":"/reference/compute_spr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Spawning Potential Ratio (SPR) — compute_spr","title":"Compute Spawning Potential Ratio (SPR) — compute_spr","text":"Compute SPR, ratio spawning biomass  given leve fishing mortality relative unfished spawning biomass.","code":""},{"path":"/reference/compute_spr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Spawning Potential Ratio (SPR) — compute_spr","text":"","code":"compute_spr(nages, mort, mat, waa, sel, ret, F)"},{"path":"/reference/compute_spr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Spawning Potential Ratio (SPR) — compute_spr","text":"nages number ages age structure mort instantaneous natural mortality rate mat maturity--age vector waa weight--age vector sel total selectivity--age vector ret total retention--age vector F instantenous fishing mortality rate","code":""},{"path":"/reference/constant_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute F from a constant F rule — constant_F","title":"Compute F from a constant F rule — constant_F","text":"Compute F constant F rule","code":""},{"path":"/reference/constant_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute F from a constant F rule — constant_F","text":"","code":"constant_F(F)"},{"path":"/reference/constant_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute F from a constant F rule — constant_F","text":"F fishing mortality rate use","code":""},{"path":"/reference/constant_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute F from a constant F rule — constant_F","text":"fishing mortality rate","code":""},{"path":"/reference/fit_TMB_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the SpatialSablefishAssessment TMB Model\n#'\nUse Template Model Builder (TMB) to fit the assessmnte model\nfrom `SpatialSablefishAssessment`. Note that the 'ln_M_year_devs'\nand 'ln_M_age_devs' parameters have been turned off. — fit_TMB_model","title":"Fit the SpatialSablefishAssessment TMB Model\n#'\nUse Template Model Builder (TMB) to fit the assessmnte model\nfrom `SpatialSablefishAssessment`. Note that the 'ln_M_year_devs'\nand 'ln_M_age_devs' parameters have been turned off. — fit_TMB_model","text":"Fit SpatialSablefishAssessment TMB Model #' Use Template Model Builder (TMB) fit assessmnte model `SpatialSablefishAssessment`. Note 'ln_M_year_devs' 'ln_M_age_devs' parameters turned .","code":""},{"path":"/reference/fit_TMB_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the SpatialSablefishAssessment TMB Model\n#'\nUse Template Model Builder (TMB) to fit the assessmnte model\nfrom `SpatialSablefishAssessment`. Note that the 'ln_M_year_devs'\nand 'ln_M_age_devs' parameters have been turned off. — fit_TMB_model","text":"","code":"fit_TMB_model(data, parameters)"},{"path":"/reference/fit_TMB_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the SpatialSablefishAssessment TMB Model\n#'\nUse Template Model Builder (TMB) to fit the assessmnte model\nfrom `SpatialSablefishAssessment`. Note that the 'ln_M_year_devs'\nand 'ln_M_age_devs' parameters have been turned off. — fit_TMB_model","text":"data data list provided TMB (`format_em_data(...)`) parameters parameter list provided TMB (`format_em_data(...)`)","code":""},{"path":"/reference/format_em_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format OM Observation Data for TMB Assessment Model\n#'\nFormat data and observations from an `afscOM` operating model\nand update the model data and parameters required by the \n`SpatialSablefishAssessment` TMB assessment model. — format_em_data","title":"Format OM Observation Data for TMB Assessment Model\n#'\nFormat data and observations from an `afscOM` operating model\nand update the model data and parameters required by the \n`SpatialSablefishAssessment` TMB assessment model. — format_em_data","text":"function requires existence 'data/sablefish_em_data_2022.RDS', 'data/sablefish_em_par_2022.RDS' files, come packaged `SablefishMSE` codebase.","code":""},{"path":"/reference/format_em_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format OM Observation Data for TMB Assessment Model\n#'\nFormat data and observations from an `afscOM` operating model\nand update the model data and parameters required by the \n`SpatialSablefishAssessment` TMB assessment model. — format_em_data","text":"","code":"format_em_data(   nyears,   dem_params,   land_caa,   survey_indices,   fxfish_caa_obs,   ll_ac_obs,   model_options,   added_years = 1 )"},{"path":"/reference/format_em_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format OM Observation Data for TMB Assessment Model\n#'\nFormat data and observations from an `afscOM` operating model\nand update the model data and parameters required by the \n`SpatialSablefishAssessment` TMB assessment model. — format_em_data","text":"nyears number years data passed model dem_params demographic parameter matrices subsetted 1 year land_caa one year worth landed catch--age data (dimensins [1, nages, nsexes, nregions, nfleets]) survey_indices one year worth survey indices (LL RPN, LL RPW, TW RPW) fxfish_caa_obs one year worth catch--age observation fixed gear fishery ll_ac_obs one year worth age composition observations frmo longline survey model_options list model options provided OM added_year number new years data added (usually 1)","code":""},{"path":"/reference/npfmc_tier3_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute F from Tier 3 HCR — npfmc_tier3_F","title":"Compute F from Tier 3 HCR — npfmc_tier3_F","text":"Compute F Tier 3 HCR","code":""},{"path":"/reference/npfmc_tier3_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute F from Tier 3 HCR — npfmc_tier3_F","text":"","code":"npfmc_tier3_F(ssb, B_ref, F_ref)"},{"path":"/reference/npfmc_tier3_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute F from Tier 3 HCR — npfmc_tier3_F","text":"ssb Value SSB B_ref Value biomass based reference point (e.g., B40) F_ref Value fishing mortality based reference point (e.g., F40)","code":""},{"path":"/reference/npfmc_tier3_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute F from Tier 3 HCR — npfmc_tier3_F","text":"fishing mortality rate","code":""},{"path":"/reference/prop_fully_mature.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute proportion of population that is fully mature\n#'\nCalculate the proportion of a population\nin age classes that are ","title":"Compute proportion of population that is fully mature\n#'\nCalculate the proportion of a population\nin age classes that are ","text":"Compute proportion population fully mature #' Calculate proportion population age classes \"fully mature\" (e.g. mat > 0.995).","code":""},{"path":"/reference/prop_fully_mature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute proportion of population that is fully mature\n#'\nCalculate the proportion of a population\nin age classes that are ","text":"","code":"prop_fully_mature(naa, mat)"},{"path":"/reference/prop_fully_mature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute proportion of population that is fully mature\n#'\nCalculate the proportion of a population\nin age classes that are ","text":"naa numbers--age vector mat maturity--age vector","code":""},{"path":"/reference/prop_mature.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute proportion of a population that is mature — prop_mature","title":"Compute proportion of a population that is mature — prop_mature","text":"Calculate proportion population reached maturity given age structure maturity schedule.","code":""},{"path":"/reference/prop_mature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute proportion of a population that is mature — prop_mature","text":"","code":"prop_mature(naa, mat)"},{"path":"/reference/prop_mature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute proportion of a population that is mature — prop_mature","text":"naa numbers--age vector mat maturity--age vector","code":""},{"path":"/reference/reformat_ggdist_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Change a `ggdist` Tibble to Long Format \n#'\nDescription — reformat_ggdist_long","title":"Change a `ggdist` Tibble to Long Format \n#'\nDescription — reformat_ggdist_long","text":"Change `ggdist` Tibble Long Format  #' Description","code":""},{"path":"/reference/reformat_ggdist_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change a `ggdist` Tibble to Long Format \n#'\nDescription — reformat_ggdist_long","text":"","code":"reformat_ggdist_long(data, n = 1)"},{"path":"/reference/reformat_ggdist_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change a `ggdist` Tibble to Long Format \n#'\nDescription — reformat_ggdist_long","text":"data tibble output `ggdist` summary function (e.g. `ggdist:median_qi(...)`) n number grouping variables used (default: 1)","code":""},{"path":"/reference/reformat_ggdist_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change a `ggdist` Tibble to Long Format \n#'\nDescription — reformat_ggdist_long","text":"long format tibble columns median, lower, upper","code":""},{"path":"/reference/run_mse.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Management Strategy Evaluation\n#'\nRun an MSE simulation loop. — run_mse","title":"Run Management Strategy Evaluation\n#'\nRun an MSE simulation loop. — run_mse","text":"Run Management Strategy Evaluation #' Run MSE simulation loop.","code":""},{"path":"/reference/run_mse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Management Strategy Evaluation\n#'\nRun an MSE simulation loop. — run_mse","text":"","code":"run_mse(om, hcr, ..., nyears_input = NA, spinup_years = 64, seed = 1120)"},{"path":"/reference/run_mse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Management Strategy Evaluation\n#'\nRun an MSE simulation loop. — run_mse","text":"om path saved OM .RDS file (contain demagraphic parameters list model options list) hcr function compute allowable F next year ... parameters pass `hcr` function nyears_input number years simulate forward (override dimensions demagraphic parameters matrices defined OM) spinup_years number years estimation process begin seed random seed","code":""},{"path":"/reference/run_mse_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Multiple MSE Simulations\n#'\nWrapper function around `run_mse` that handle running and\ncompiling the outputs of multiple MSE closed-loop simulations,\nacross different random seeds. — run_mse_multiple","title":"Run Multiple MSE Simulations\n#'\nWrapper function around `run_mse` that handle running and\ncompiling the outputs of multiple MSE closed-loop simulations,\nacross different random seeds. — run_mse_multiple","text":"Run Multiple MSE Simulations #' Wrapper function around `run_mse` handle running compiling outputs multiple MSE closed-loop simulations, across different random seeds.","code":""},{"path":"/reference/run_mse_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Multiple MSE Simulations\n#'\nWrapper function around `run_mse` that handle running and\ncompiling the outputs of multiple MSE closed-loop simulations,\nacross different random seeds. — run_mse_multiple","text":"","code":"run_mse_multiple(nsims, seeds, nyears, ...)"},{"path":"/reference/run_mse_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Multiple MSE Simulations\n#'\nWrapper function around `run_mse` that handle running and\ncompiling the outputs of multiple MSE closed-loop simulations,\nacross different random seeds. — run_mse_multiple","text":"nsims number unique simulations run seeds vector random seeds use (length(seeds) == nsims) nyears number years simulation ... additional parameter sto pass `run_mse` call","code":""},{"path":"/reference/run_mse_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Multiple MSE Simulations\n#'\nWrapper function around `run_mse` that handle running and\ncompiling the outputs of multiple MSE closed-loop simulations,\nacross different random seeds. — run_mse_multiple","text":"list arrays containing OM results simulation","code":""},{"path":"/reference/shannon_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Shannon Diversity Index (H') — shannon_diversity","title":"Compute Shannon Diversity Index (H') — shannon_diversity","text":"Calculate Shannon diversity index (H') (Shannon Weaver, 1949) give numbers age vector.","code":""},{"path":"/reference/shannon_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Shannon Diversity Index (H') — shannon_diversity","text":"","code":"shannon_diversity(naa)"},{"path":"/reference/shannon_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Shannon Diversity Index (H') — shannon_diversity","text":"naa numbers--age vector","code":""},{"path":"/reference/shannon_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Shannon Diversity Index (H') — shannon_diversity","text":"H' = sum(naa*log(naa))","code":""},{"path":"/reference/simulate_TAC.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Total Allowable Catch Projections\n#'\nDetermine the total allowable catch (TAC) in the next simulation\nyear based on the fishing mortality rate identified by a harvest\ncontrol rule (HCR). TAC is computed by projecting the population\nforward one year under the specific level of F and computing the\nthe amount of catch that would be taken from that projected \npopulation structure based on the joint fishery selectivity curve. — simulate_TAC","title":"Simulate Total Allowable Catch Projections\n#'\nDetermine the total allowable catch (TAC) in the next simulation\nyear based on the fishing mortality rate identified by a harvest\ncontrol rule (HCR). TAC is computed by projecting the population\nforward one year under the specific level of F and computing the\nthe amount of catch that would be taken from that projected \npopulation structure based on the joint fishery selectivity curve. — simulate_TAC","text":"Simulate Total Allowable Catch Projections #' Determine total allowable catch (TAC) next simulation year based fishing mortality rate identified harvest control rule (HCR). TAC computed projecting population forward one year specific level F computing amount catch taken projected  population structure based joint fishery selectivity curve.","code":""},{"path":"/reference/simulate_TAC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Total Allowable Catch Projections\n#'\nDetermine the total allowable catch (TAC) in the next simulation\nyear based on the fishing mortality rate identified by a harvest\ncontrol rule (HCR). TAC is computed by projecting the population\nforward one year under the specific level of F and computing the\nthe amount of catch that would be taken from that projected \npopulation structure based on the joint fishery selectivity curve. — simulate_TAC","text":"","code":"simulate_TAC(hcr_F, naa, recruitment, joint_sel, dem_params)"},{"path":"/reference/simulate_TAC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Total Allowable Catch Projections\n#'\nDetermine the total allowable catch (TAC) in the next simulation\nyear based on the fishing mortality rate identified by a harvest\ncontrol rule (HCR). TAC is computed by projecting the population\nforward one year under the specific level of F and computing the\nthe amount of catch that would be taken from that projected \npopulation structure based on the joint fishery selectivity curve. — simulate_TAC","text":"hcr_F fishing mortality rate identified HCR naa numbers--age vector (dimensions [1, nages, nsexes, nregions]) recruitment projected recruitment next year dem_params demographic parameter matrices subsetted 1 year join_sel joint fishery selectivity","code":""},{"path":[]},{"path":"/reference/threshold_cap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute F following a threshold rule, with a cap at B/B_ref = 1 — threshold_cap","title":"Compute F following a threshold rule, with a cap at B/B_ref = 1 — threshold_cap","text":"Compute F following threshold rule, cap B/B_ref = 1","code":""},{"path":"/reference/threshold_cap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute F following a threshold rule, with a cap at B/B_ref = 1 — threshold_cap","text":"","code":"threshold_cap(ssb, B_ref, F_ref, alpha)"},{"path":"/reference/threshold_cap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute F following a threshold rule, with a cap at B/B_ref = 1 — threshold_cap","text":"ssb Value SSB B_ref Value biomass based reference point (e.g., B40) F_ref Value fishing mortality based reference point (e.g., F40) alpha Cutoff set F 0","code":""},{"path":"/reference/threshold_cap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute F following a threshold rule, with a cap at B/B_ref = 1 — threshold_cap","text":"fishing mortality rate","code":""},{"path":"/reference/threshold_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic threshold F harvest control rule\n#'\nA generic 4 parameters threshold F HCR. — threshold_f","title":"Generic threshold F harvest control rule\n#'\nA generic 4 parameters threshold F HCR. — threshold_f","text":"Generic threshold F harvest control rule #' generic 4 parameters threshold F HCR.","code":""},{"path":"/reference/threshold_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic threshold F harvest control rule\n#'\nA generic 4 parameters threshold F HCR. — threshold_f","text":"","code":"threshold_f(x, f_min, f_max, lrp, urp)"},{"path":"/reference/threshold_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic threshold F harvest control rule\n#'\nA generic 4 parameters threshold F HCR. — threshold_f","text":"x input HCR (e.g. SSB , SSB/B40) f_min F use x < lrp f_max F use x > urp lrp value x f_min applies urp value x f_max applies","code":""},{"path":"/reference/threshold_f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic threshold F harvest control rule\n#'\nA generic 4 parameters threshold F HCR. — threshold_f","text":"fishing mortality rate","code":""}]
